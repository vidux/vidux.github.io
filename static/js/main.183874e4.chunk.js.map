{"version":3,"sources":["polyfill.js","redux/nasa_potd/reducer.js","redux/reducers.js","redux/nasa_potd/saga.js","redux/sagas.js","redux/store.js","App.js","serviceWorker.js","index.js","redux/nasa_potd/actions.js"],"names":["window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","initState","Map","nasa_potd","state","action","type","actions","GET_NASA_DATA_FETCH_START","set","GET_NASA_DATA_FETCH_DONE","payload","GET_NASA_DATA_FETCH_ERROR","getNasaAstroidJson","rootSaga","takeEvery","call","a","async","axios","get","then","res","data","Result","date","hdurl","put","all","fork","getState","history","createBrowserHistory","sagaMiddleware","createSagaMiddleware","routeMiddleware","routerMiddleware","middlewares","thunk","store","createStore","combineReducers","reducers","router","connectRouter","compose","applyMiddleware","run","DefaultLayout","React","lazy","App","Suspense","fallback","className","path","name","render","props","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","dispatch"],"mappings":"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","file":"static/js/main.183874e4.chunk.js","sourcesContent":["/*\r\n* required polyfills\r\n*/\r\nimport \"core-js\";\r\nimport 'core-js/features/set/map';\r\n\r\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\r\n// import 'core-js/es6/symbol'\r\n// import 'core-js/es6/object'\r\n// import 'core-js/es6/function'\r\n// import 'core-js/es6/parse-int'\r\n// import 'core-js/es6/parse-float'\r\n// import 'core-js/es6/number'\r\n// import 'core-js/es6/math'\r\n// import 'core-js/es6/string'\r\n// import 'core-js/es6/date'\r\n// import 'core-js/es6/array'\r\n// import 'core-js/es6/regexp'\r\n// import 'core-js/es6/map'\r\n// import 'core-js/es6/weak-map'\r\n// import 'core-js/es6/set'\r\n// import 'core-js/es7/object'\r\n\r\n/** IE10 and IE11 requires the following for the Reflect API. */\r\n// import 'core-js/es6/reflect'\r\n\r\n/** Evergreen browsers require these. **/\r\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\r\n// import 'core-js/es7/reflect'\r\n\r\n// CustomEvent() constructor functionality in IE9, IE10, IE11\r\n(function () {\r\n\r\n  if ( typeof window.CustomEvent === \"function\" ) return false\r\n\r\n  function CustomEvent ( event, params ) {\r\n    params = params || { bubbles: false, cancelable: false, detail: undefined }\r\n    var evt = document.createEvent( 'CustomEvent' )\r\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail )\r\n    return evt\r\n  }\r\n\r\n  CustomEvent.prototype = window.Event.prototype\r\n\r\n  window.CustomEvent = CustomEvent\r\n})()\r\n","import { Map } from 'immutable';\r\nimport actions from './actions';\r\n\r\nconst initState = new Map({\r\n \r\n});\r\n\r\nexport default function reducer(state = initState, action) {\r\n \r\n  switch (action.type) {\r\n    case actions.GET_NASA_DATA_FETCH_START:\r\n      return state\r\n        .set('loading', true);\r\n\r\n    case actions.GET_NASA_DATA_FETCH_DONE:\r\n      \r\n      return state\r\n        .set('nasa_iotd_data', action.payload)\r\n        .set('loading', false);\r\n\r\n    case actions.GET_NASA_DATA_FETCH_ERROR:\r\n      return state\r\n        .set('nasa_iotd_data', {})\r\n        .set('loading', false);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import nasa_potd from './nasa_potd/reducer';\r\n\r\n\r\nexport default {\r\n  nasa_potd,\r\n\r\n};\r\n","import { all, takeEvery, fork,call ,put} from 'redux-saga/effects';\r\nimport actions from './actions';\r\nimport axios from 'axios';\r\n\r\nexport function* getNasaAstroidJson() {\r\n  yield takeEvery(actions.GET_NASA_DATA_FETCH_START, function*(payload) {\r\n    const Result = yield call(async ()=>\r\n      await axios.get(`https://api.nasa.gov/planetary/apod?api_key=MD3XFhW0pb8OnFVDGPZs0uMHtsOTGO542q3oJyio`)\r\n      .then(res => res.data)\r\n    );\r\n    \r\n    if (Result.date && Result.hdurl) {\r\n      \r\n      yield put({ type: actions.GET_NASA_DATA_FETCH_DONE, payload:Result})\r\n    } else {\r\n      yield put({ type: actions.GET_NASA_DATA_FETCH_ERROR })\r\n    }\r\n\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default function* rootSaga() {\r\n  yield all([fork(getNasaAstroidJson)]);\r\n}\r\n","import { all } from 'redux-saga/effects';\r\nimport nasa_potd from './nasa_potd/saga';\r\n\r\n\r\nexport default function* rootSaga(getState) {\r\n  yield all([\r\n    nasa_potd(),\r\n  \r\n  ]);\r\n}\r\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport { createBrowserHistory } from 'history';\r\nimport { routerMiddleware ,connectRouter} from 'connected-react-router';\r\nimport thunk from 'redux-thunk';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport reducers from '../redux/reducers';\r\nimport rootSaga from '../redux/sagas';\r\n\r\n const history = createBrowserHistory();\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst routeMiddleware = routerMiddleware(history);\r\nconst middlewares = [thunk, sagaMiddleware, routeMiddleware];\r\n\r\nconst store = createStore(\r\n  combineReducers({\r\n    ...reducers,\r\n    router: connectRouter(history),\r\n  }),\r\n  compose(applyMiddleware(...middlewares))\r\n);\r\nsagaMiddleware.run(rootSaga);\r\nexport { store, history };\r\n","import React, { Component } from 'react';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { store, history } from './redux/store';\r\n\r\n\r\n// import { renderRoutes } from 'react-router-config';\r\nimport './App.scss';\r\n\r\nconst loading = () => <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>;\r\n\r\n// Containers\r\nconst DefaultLayout = React.lazy(() => import('./containers/DefaultLayout'));\r\n\r\n// Pages\r\n\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n\t  <Provider store={store}>\r\n           \r\n        \r\n      <HashRouter>\r\n          <React.Suspense fallback={loading()}>\r\n            <Switch>\r\n              \r\n              <Route path=\"/\" name=\"Home\" render={props => <DefaultLayout {...props}/>} />\r\n            </Switch>\r\n          </React.Suspense>\r\n      </HashRouter>\r\n\t    </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'react-app-polyfill/ie9'; // For IE 9-11 support\r\nimport 'react-app-polyfill/stable';\r\n// import 'react-app-polyfill/ie11'; // For IE 11 support\r\nimport './polyfill'\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'antd/dist/antd.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register() ;\r\n","const actions = {\r\n  GET_NASA_DATA_FETCH_START: 'GET_NASA_DATA_FETCH_START',\r\n  GET_NASA_DATA_FETCH_DONE: 'GET_NASA_DATA_FETCH_DONE',\r\n  GET_NASA_DATA_FETCH_ERROR: 'GET_NASA_DATA_FETCH_ERROR',\r\n\r\n\r\n  getNasaAstroidJson: (data) => {\r\n    return (dispatch, getState) => {\r\n      \r\n      dispatch({\r\n        type: actions.GET_NASA_DATA_FETCH_START,\r\n        payload: data\r\n      });\r\n    };\r\n  },\r\n\r\n};\r\nexport default actions;\r\n"],"sourceRoot":""}